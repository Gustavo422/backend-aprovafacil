import { describe, it, expect, beforeEach } from 'vitest'
import { supabase, testData, getAuthToken } from './setup.js'

describe('游댏 Autentica칞칚o', () => {
  beforeEach(async () => {
    // Limpar sess칫es anteriores
    await supabase.auth.signOut()
  })

  describe('Registro de Usu치rio', () => {
    it('deve registrar um novo usu치rio com sucesso', async () => {
      const testEmail = `test-${Date.now()}@example.com`
      const testPassword = 'testpassword123'

      const { data, error } = await supabase.auth.signUp({
        email: testEmail,
        password: testPassword
      })

      expect(error).toBeNull()
      expect(data.user).toBeDefined()
      expect(data.user?.email).toBe(testEmail)
      expect(data.session).toBeDefined()
    })

    it('deve rejeitar senha muito curta', async () => {
      const { data, error } = await supabase.auth.signUp({
        email: 'test@example.com',
        password: '123'
      })

      expect(error).toBeDefined()
      expect(error?.message).toContain('password')
    })

    it('deve rejeitar email inv치lido', async () => {
      const { data, error } = await supabase.auth.signUp({
        email: 'invalid-email',
        password: 'testpassword123'
      })

      expect(error).toBeDefined()
      expect(error?.message).toContain('email')
    })
  })

  describe('Login de Usu치rio', () => {
    it('deve fazer login com credenciais v치lidas', async () => {
      const token = await getAuthToken(testData.user.email, testData.user.password)

      expect(token).toBeDefined()
      expect(token).toBeTypeOf('string')
      expect(token!.length).toBeGreaterThan(0)
    })

    it('deve rejeitar credenciais inv치lidas', async () => {
      const { data, error } = await supabase.auth.signInWithPassword({
        email: testData.user.email,
        password: 'wrongpassword'
      })

      expect(error).toBeDefined()
      expect(error?.message).toContain('Invalid login credentials')
      expect(data.session).toBeNull()
    })

    it('deve rejeitar email inexistente', async () => {
      const { data, error } = await supabase.auth.signInWithPassword({
        email: 'nonexistent@example.com',
        password: 'testpassword123'
      })

      expect(error).toBeDefined()
      expect(error?.message).toContain('Invalid login credentials')
      expect(data.session).toBeNull()
    })
  })

  describe('Logout', () => {
    it('deve fazer logout com sucesso', async () => {
      // Primeiro fazer login
      await supabase.auth.signInWithPassword({
        email: testData.user.email,
        password: testData.user.password
      })

      // Verificar se est치 logado
      const { data: userData } = await supabase.auth.getUser()
      expect(userData.user).toBeDefined()

      // Fazer logout
      const { error } = await supabase.auth.signOut()
      expect(error).toBeNull()

      // Verificar se foi deslogado
      const { data: logoutData } = await supabase.auth.getUser()
      expect(logoutData.user).toBeNull()
    })
  })

  describe('Verifica칞칚o de Sess칚o', () => {
    it('deve verificar sess칚o ativa', async () => {
      // Fazer login
      const token = await getAuthToken(testData.user.email, testData.user.password)
      expect(token).toBeDefined()

      // Verificar sess칚o
      const { data, error } = await supabase.auth.getUser()
      expect(error).toBeNull()
      expect(data.user).toBeDefined()
      expect(data.user?.email).toBe(testData.user.email)
    })

    it('deve retornar null para sess칚o inexistente', async () => {
      // Garantir que n칚o h치 sess칚o
      await supabase.auth.signOut()

      const { data, error } = await supabase.auth.getUser()
      expect(error).toBeNull()
      expect(data.user).toBeNull()
    })
  })

  describe('Atualiza칞칚o de Perfil', () => {
    it('deve atualizar dados do usu치rio', async () => {
      // Fazer login
      const token = await getAuthToken(testData.user.email, testData.user.password)
      expect(token).toBeDefined()

      // Atualizar dados
      const { data, error } = await supabase.auth.updateUser({
        data: {
          nome: 'Usu치rio Teste',
          role: 'user'
        }
      })

      expect(error).toBeNull()
      expect(data.user).toBeDefined()
      expect(data.user?.user_metadata?.nome).toBe('Usu치rio Teste')
      expect(data.user?.user_metadata?.role).toBe('user')
    })
  })

  describe('Recupera칞칚o de Senha', () => {
    it('deve enviar email de recupera칞칚o', async () => {
      const { data, error } = await supabase.auth.resetPasswordForEmail(
        testData.user.email,
        {
          redirectTo: 'http://localhost:3000/reset-password'
        }
      )

      // Em ambiente de teste, pode n칚o enviar email real
      // mas n칚o deve dar erro
      expect(error).toBeNull()
    })
  })

  describe('Verifica칞칚o de Email', () => {
    it('deve verificar se email est치 confirmado', async () => {
      const token = await getAuthToken(testData.user.email, testData.user.password)
      expect(token).toBeDefined()

      const { data, error } = await supabase.auth.getUser()
      expect(error).toBeNull()
      expect(data.user).toBeDefined()
      
      // Em ambiente de teste, emails podem estar auto-confirmados
      // Verificar se o usu치rio existe
      expect(data.user?.email).toBe(testData.user.email)
    })
  })

  describe('Seguran칞a', () => {
    it('deve rejeitar tokens inv치lidos', async () => {
      // Tentar usar token inv치lido
      const { data, error } = await supabase.auth.getUser()
      
      // Deve retornar null para usu치rio sem token v치lido
      expect(data.user).toBeNull()
    })

    it('deve limitar tentativas de login', async () => {
      // Tentar login m칰ltiplas vezes com senha errada
      const attempts = 5
      let lastError: any = null

      for (let i = 0; i < attempts; i++) {
        const { error } = await supabase.auth.signInWithPassword({
          email: testData.user.email,
          password: 'wrongpassword'
        })
        lastError = error
      }

      // Deve ter erro ap칩s m칰ltiplas tentativas
      expect(lastError).toBeDefined()
    })
  })
}) 
#!/usr/bin/env node

/**
 * Script simples para aplicar migra√ß√£o de RLS no Supabase
 * 
 * Este script executa comandos SQL diretamente no banco de dados
 */

const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY s√£o obrigat√≥rias')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function applyRLSMigration() {
  console.log('üöÄ Iniciando aplica√ß√£o da migra√ß√£o de RLS...')
  
  try {
    // Ler o arquivo de migra√ß√£o
    const migrationPath = path.join(__dirname, '../supabase/migrations/20241217000000_enable_rls_policies.sql')
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8')
    
    console.log('üìÑ Aplicando migra√ß√£o de RLS...')
    
    // Executar o SQL completo
    const { error } = await supabase.rpc('exec_sql', { sql: migrationSQL })
    
    if (error) {
      console.error('‚ùå Erro ao aplicar migra√ß√£o:', error)
      
      // Tentar executar comandos individualmente
      console.log('üîÑ Tentando executar comandos individualmente...')
      await executeCommandsIndividually(migrationSQL)
    } else {
      console.log('‚úÖ Migra√ß√£o de RLS aplicada com sucesso!')
      await verifyRLSPolicies()
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao aplicar migra√ß√£o:', error)
    process.exit(1)
  }
}

async function executeCommandsIndividually(sql) {
  // Comandos principais para habilitar RLS
  const commands = [
    // Habilitar RLS nas tabelas principais
    "ALTER TABLE public.concursos ENABLE ROW LEVEL SECURITY;",
    "ALTER TABLE public.apostilas ENABLE ROW LEVEL SECURITY;",
    "ALTER TABLE public.simulados ENABLE ROW LEVEL SECURITY;",
    "ALTER TABLE public.user_apostila_progress ENABLE ROW LEVEL SECURITY;",
    "ALTER TABLE public.user_simulado_progress ENABLE ROW LEVEL SECURITY;",
    
    // Pol√≠ticas b√°sicas
    "CREATE POLICY \"Concursos s√£o p√∫blicos para leitura\" ON public.concursos FOR SELECT USING (true);",
    "CREATE POLICY \"Apostilas s√£o p√∫blicas para leitura\" ON public.apostilas FOR SELECT USING (true);",
    "CREATE POLICY \"Simulados s√£o p√∫blicos para leitura\" ON public.simulados FOR SELECT USING (true);",
    "CREATE POLICY \"Usu√°rios veem apenas seu pr√≥prio progresso de apostilas\" ON public.user_apostila_progress FOR ALL USING (auth.uid() = user_id);",
    "CREATE POLICY \"Usu√°rios veem apenas seu pr√≥prio progresso de simulados\" ON public.user_simulado_progress FOR ALL USING (auth.uid() = user_id);"
  ]
  
  let successCount = 0
  let errorCount = 0
  
  for (let i = 0; i < commands.length; i++) {
    const command = commands[i]
    
    try {
      console.log(`  [${i + 1}/${commands.length}] Executando: ${command.substring(0, 50)}...`)
      
      const { error } = await supabase.rpc('exec_sql', { sql: command })
      
      if (error) {
        console.error(`    ‚ùå Erro:`, error.message)
        errorCount++
      } else {
        console.log(`    ‚úÖ Sucesso`)
        successCount++
      }
    } catch (err) {
      console.error(`    ‚ùå Erro:`, err.message)
      errorCount++
    }
  }
  
  console.log(`\nüìä Resultado: ${successCount} sucessos, ${errorCount} erros`)
}

async function verifyRLSPolicies() {
  console.log('\nüîç Verificando pol√≠ticas RLS...')
  
  try {
    // Verificar se RLS est√° habilitado nas tabelas principais
    const tables = ['concursos', 'apostilas', 'simulados', 'user_apostila_progress', 'user_simulado_progress']
    
    for (const tableName of tables) {
      const { data, error } = await supabase
        .from('information_schema.tables')
        .select('table_name')
        .eq('table_schema', 'public')
        .eq('table_name', tableName)
      
      if (error) {
        console.error(`‚ùå Erro ao verificar tabela ${tableName}:`, error)
      } else if (data && data.length > 0) {
        console.log(`‚úÖ Tabela ${tableName} existe`)
      } else {
        console.log(`‚ö†Ô∏è Tabela ${tableName} n√£o encontrada`)
      }
    }
    
    console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!')
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar pol√≠ticas:', error)
  }
}

// Executar o script
if (require.main === module) {
  applyRLSMigration()
    .then(() => {
      console.log('\nüèÅ Script conclu√≠do!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('\nüí• Erro fatal:', error)
      process.exit(1)
    })
}

module.exports = { applyRLSMigration, verifyRLSPolicies } 
#!/usr/bin/env node

/**
 * Script para testar a integra√ß√£o do backend com Supabase
 * Executa: node scripts/test-integration.js
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas!');
  console.error('Verifique se SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY est√£o definidas no .env');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// Fun√ß√£o para testar conex√£o
async function testConnection() {
  console.log('üîå Testando conex√£o com Supabase...');
  
  try {
    const { data, error } = await supabase.from('users').select('count').limit(1);
    
    if (error) {
      console.error('‚ùå Erro na conex√£o:', error);
      return false;
    }
    
    console.log('‚úÖ Conex√£o com Supabase estabelecida!');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao conectar:', error);
    return false;
  }
}

// Fun√ß√£o para testar tabelas
async function testTables() {
  console.log('\nüìä Testando tabelas do banco...');
  
  const tables = [
    'users',
    'concursos',
    'concurso_categorias',
    'apostilas',
    'simulados',
    'flashcards',
    'mapa_assuntos',
    'planos_estudo',
    'questoes_semanais'
  ];
  
  for (const table of tables) {
    try {
      const { data, error } = await supabase
        .from(table)
        .select('count')
        .limit(1);
      
      if (error) {
        console.log(`‚ùå ${table}: ${error.message}`);
      } else {
        console.log(`‚úÖ ${table}: OK`);
      }
    } catch (error) {
      console.log(`‚ùå ${table}: ${error.message}`);
    }
  }
}

// Fun√ß√£o para testar opera√ß√µes CRUD
async function testCRUD() {
  console.log('\nüîÑ Testando opera√ß√µes CRUD...');
  
  // Teste de cria√ß√£o
  try {
    const testData = {
      nome: 'Teste de Integra√ß√£o',
      descricao: 'Concurso criado para testar integra√ß√£o',
      categoria_id: null, // Ser√° definido se houver categorias
      is_active: false // N√£o ativo para n√£o poluir o banco
    };
    
    // Buscar uma categoria existente
    const { data: categorias } = await supabase
      .from('concurso_categorias')
      .select('id')
      .limit(1);
    
    if (categorias && categorias.length > 0) {
      testData.categoria_id = categorias[0].id;
    }
    
    const { data: created, error: createError } = await supabase
      .from('concursos')
      .insert(testData)
      .select()
      .single();
    
    if (createError) {
      console.log('‚ùå Cria√ß√£o:', createError.message);
    } else {
      console.log('‚úÖ Cria√ß√£o: OK');
      
      // Teste de leitura
      const { data: read, error: readError } = await supabase
        .from('concursos')
        .select('*')
        .eq('id', created.id)
        .single();
      
      if (readError) {
        console.log('‚ùå Leitura:', readError.message);
      } else {
        console.log('‚úÖ Leitura: OK');
      }
      
      // Teste de atualiza√ß√£o
      const { error: updateError } = await supabase
        .from('concursos')
        .update({ descricao: 'Descri√ß√£o atualizada' })
        .eq('id', created.id);
      
      if (updateError) {
        console.log('‚ùå Atualiza√ß√£o:', updateError.message);
      } else {
        console.log('‚úÖ Atualiza√ß√£o: OK');
      }
      
      // Teste de exclus√£o
      const { error: deleteError } = await supabase
        .from('concursos')
        .delete()
        .eq('id', created.id);
      
      if (deleteError) {
        console.log('‚ùå Exclus√£o:', deleteError.message);
      } else {
        console.log('‚úÖ Exclus√£o: OK');
      }
    }
  } catch (error) {
    console.log('‚ùå Teste CRUD:', error.message);
  }
}

// Fun√ß√£o para testar relacionamentos
async function testRelationships() {
  console.log('\nüîó Testando relacionamentos...');
  
  try {
    const { data, error } = await supabase
      .from('concursos')
      .select(`
        *,
        concurso_categorias (
          id,
          nome,
          slug
        )
      `)
      .limit(5);
    
    if (error) {
      console.log('‚ùå Relacionamentos:', error.message);
    } else {
      console.log('‚úÖ Relacionamentos: OK');
      console.log(`   Encontrados ${data?.length || 0} concursos com categorias`);
    }
  } catch (error) {
    console.log('‚ùå Relacionamentos:', error.message);
  }
}

// Fun√ß√£o para testar autentica√ß√£o
async function testAuth() {
  console.log('\nüîê Testando autentica√ß√£o...');
  
  try {
    // Teste de verifica√ß√£o de usu√°rio
    const { data: { user }, error } = await supabase.auth.getUser();
    
    if (error) {
      console.log('‚ùå Autentica√ß√£o:', error.message);
    } else {
      console.log('‚úÖ Autentica√ß√£o: OK');
      console.log(`   Usu√°rio atual: ${user ? user.email : 'Nenhum'}`);
    }
  } catch (error) {
    console.log('‚ùå Autentica√ß√£o:', error.message);
  }
}

// Fun√ß√£o para testar RLS (Row Level Security)
async function testRLS() {
  console.log('\nüõ°Ô∏è Testando RLS (Row Level Security)...');
  
  try {
    // Teste sem autentica√ß√£o
    const { data: publicData, error: publicError } = await supabase
      .from('concursos')
      .select('id, nome')
      .eq('is_active', true)
      .limit(1);
    
    if (publicError) {
      console.log('‚ùå RLS p√∫blico:', publicError.message);
    } else {
      console.log('‚úÖ RLS p√∫blico: OK');
    }
    
    // Teste com autentica√ß√£o (se houver usu√°rio)
    const { data: { user } } = await supabase.auth.getUser();
    
    if (user) {
      const { data: privateData, error: privateError } = await supabase
        .from('concursos')
        .select('*')
        .limit(1);
      
      if (privateError) {
        console.log('‚ùå RLS privado:', privateError.message);
      } else {
        console.log('‚úÖ RLS privado: OK');
      }
    } else {
      console.log('‚ö†Ô∏è RLS privado: Nenhum usu√°rio autenticado');
    }
  } catch (error) {
    console.log('‚ùå RLS:', error.message);
  }
}

// Fun√ß√£o principal
async function runTests() {
  console.log('üöÄ Iniciando testes de integra√ß√£o...\n');
  
  const tests = [
    { name: 'Conex√£o', fn: testConnection },
    { name: 'Tabelas', fn: testTables },
    { name: 'CRUD', fn: testCRUD },
    { name: 'Relacionamentos', fn: testRelationships },
    { name: 'Autentica√ß√£o', fn: testAuth },
    { name: 'RLS', fn: testRLS }
  ];
  
  let passed = 0;
  let total = tests.length;
  
  for (const test of tests) {
    try {
      const result = await test.fn();
      if (result !== false) {
        passed++;
      }
    } catch (error) {
      console.error(`‚ùå Erro no teste ${test.name}:`, error.message);
    }
  }
  
  console.log('\nüìä Resultado dos testes:');
  console.log(`‚úÖ Passou: ${passed}/${total}`);
  console.log(`‚ùå Falhou: ${total - passed}/${total}`);
  
  if (passed === total) {
    console.log('\nüéâ Todos os testes passaram! A integra√ß√£o est√° funcionando corretamente.');
  } else {
    console.log('\n‚ö†Ô∏è Alguns testes falharam. Verifique a configura√ß√£o.');
  }
}

// Executar testes
runTests().catch(console.error); 